name: ü§ñ Copilot Review & Quality Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop, main]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-automation:
    name: ü§ñ Copilot Review & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.actor != 'dependabot[bot]' && github.actor != 'github-copilot[bot]'
    
    steps:
      - name: ü§ñ Auto-request Copilot as reviewer
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            try {
              // Check if Copilot is already a reviewer
              const { data: reviews } = await github.rest.pulls.listRequestedReviewers({
                owner,
                repo,
                pull_number
              });
              
              const copilotAlreadyRequested = reviews.users.some(user => 
                user.login === 'github-copilot' || user.login === 'copilot'
              );
              
              if (!copilotAlreadyRequested) {
                // Request Copilot as reviewer
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number,
                  reviewers: ['github-copilot']
                });
                
                console.log('‚úÖ Successfully requested Copilot as reviewer');
                
                // Add a comment to notify
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body: `ü§ñ **Copilot has been automatically requested as a reviewer**\n\nCopilot will review this PR based on our project standards and guidelines defined in \`.github/copilot-instructions.md\`.\n\n---\n*This is an automated action. Copilot reviews help maintain code quality and consistency.*`
                });
                
              } else {
                console.log('‚ÑπÔ∏è Copilot is already requested as a reviewer');
              }
              
            } catch (error) {
              console.error('Error requesting Copilot reviewer:', error);
              
              // Fallback: Add comment explaining the setup
              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body: `ü§ñ **Copilot Auto-Review Setup**\n\nTo enable automatic Copilot reviews:\n\n1. Go to Repository Settings ‚Üí General ‚Üí Pull Requests\n2. Enable "Automatically request reviews from owners of the code being changed"\n3. Or manually request \`@github-copilot\` as a reviewer\n\n---\n*Copilot reviews are configured via \`.github/copilot-instructions.md\`*`
                });
              } catch (commentError) {
                console.error('Error adding fallback comment:', commentError);
              }
            }

      - name: üìä Log PR Changes (Info Only)
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            try {
              // Get changed files for logging
              const { data: files } = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number
              });
              
              const categories = {
                architecture: [],
                components: [],
                database: [],
                utilities: [],
                tests: [],
                documentation: [],
                github: []
              };
              
              // Categorize changes for logging
              for (const file of files) {
                if (file.filename.startsWith('app/')) {
                  categories.architecture.push(file.filename);
                } else if (file.filename.startsWith('components/')) {
                  categories.components.push(file.filename);
                } else if (file.filename.startsWith('db/')) {
                  categories.database.push(file.filename);
                } else if (file.filename.startsWith('helpers/')) {
                  categories.utilities.push(file.filename);
                } else if (file.filename.includes('test') || file.filename.includes('__tests__')) {
                  categories.tests.push(file.filename);
                } else if (file.filename.endsWith('.md')) {
                  categories.documentation.push(file.filename);
                } else if (file.filename.includes('.github/')) {
                  categories.github.push(file.filename);
                }
              }
              
              console.log('üìä PR Change Categories:');
              Object.entries(categories).forEach(([category, files]) => {
                if (files.length > 0) {
                  console.log(`  ${category}: ${files.length} file(s)`);
                }
              });
              
            } catch (error) {
              console.error('Error analyzing PR changes:', error);
            }

      - name: üîç PR Template Compliance Check
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number
              });
              
              const body = pr.body || '';
              const title = pr.title || '';
              
              // Check PR template compliance
              const templateChecks = {
                hasDescription: body.includes('## üìã Description') || body.includes('Description'),
                hasTypeOfChange: body.includes('## üîÑ Type of Change') || body.includes('Type of Change'),
                hasTesting: body.includes('## üß™ Testing') || body.includes('Testing'),
                hasChecklist: body.includes('## ‚úÖ Checklist') || body.includes('Checklist'),
                hasCheckboxes: body.includes('- [ ]') || body.includes('- [x]'),
                hasProperTitle: title.length > 10 && !title.includes('WIP') && !title.includes('Draft')
              };
              
              const complianceScore = Object.values(templateChecks).filter(Boolean).length;
              const totalChecks = Object.keys(templateChecks).length;
              
              console.log('üìã PR Template Compliance:');
              console.log(`  Score: ${complianceScore}/${totalChecks}`);
              Object.entries(templateChecks).forEach(([check, passed]) => {
                console.log(`  ${check}: ${passed ? '‚úÖ' : '‚ùå'}`);
              });
              
              // Store compliance data for later use
              const complianceData = {
                score: complianceScore,
                total: totalChecks,
                percentage: Math.round((complianceScore / totalChecks) * 100),
                checks: templateChecks
              };
              
              // Add compliance comment if score is low
              if (complianceScore < 4) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body: `## üìã PR Template Compliance Alert

                  **Compliance Score: ${complianceScore}/${totalChecks} (${complianceData.percentage}%)**

                  Missing sections:
                  ${Object.entries(templateChecks)
                    .filter(([_, passed]) => !passed)
                    .map(([check, _]) => `- ${check.replace(/([A-Z])/g, ' $1').toLowerCase()}`)
                    .join('\n')}

                  Please update your PR description to include all required sections from the template for better review quality.

                  ---
                  *This helps reviewers understand your changes better and ensures consistent PR quality.*`
                });
              }
              
            } catch (error) {
              console.error('Error checking PR template compliance:', error);
            }

      - name: üì• Checkout code for quality checks
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: üì¶ Install dependencies
        run: yarn install --immutable

      - name: üîç TypeScript Check
        run: |
          echo "üîç Running TypeScript compilation check..."
          yarn type-check
          echo "‚úÖ TypeScript check passed"

      - name: üé® ESLint Check  
        run: |
          echo "üé® Running ESLint..."
          yarn lint
          echo "‚úÖ ESLint check passed"

      - name: üß™ Test Suite
        id: test-suite
        run: |
          echo "üß™ Running test suite..."
          yarn test --coverage --watchAll=false 2>&1 | tee test-output.log
          
          # Extract test count from Jest output
          TEST_RESULTS=$(grep -E "Tests:|Test Suites:" test-output.log | tail -2)
          PASSED_TESTS=$(echo "$TEST_RESULTS" | grep "Tests:" | grep -o '[0-9]* passed' | head -1)
          TOTAL_TESTS=$(echo "$TEST_RESULTS" | grep "Tests:" | grep -o '[0-9]* total' | head -1)
          
          echo "test-summary=$PASSED_TESTS, $TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed"

      - name: üìù Markdown Lint Check
        run: |
          echo "üìù Checking markdown documentation..."
          if ls docs/**/*.md .github/**/*.md 1> /dev/null 2>&1; then
            yarn markdownlint docs/**/*.md .github/**/*.md
            echo "‚úÖ Markdown linting passed"
          else
            echo "‚ÑπÔ∏è No markdown files to check"
          fi

      - name: üìä Quality Gate Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            // Get test results from previous step
            const testSummary = `${{ steps.test-suite.outputs.test-summary }}` || 'tests completed';
            
            // Get PR data for enhanced Copilot guidance
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number
            });
            
            // Analyze changed files for specific review focus
            const hasTypeScriptChanges = files.some(f => f.filename.endsWith('.ts') || f.filename.endsWith('.tsx'));
            const hasComponentChanges = files.some(f => f.filename.startsWith('components/'));
            const hasDbChanges = files.some(f => f.filename.startsWith('db/'));
            const hasTestChanges = files.some(f => f.filename.includes('test') || f.filename.includes('__tests__'));
            const hasAppChanges = files.some(f => f.filename.startsWith('app/'));
            
            const summaryComment = `## ‚úÖ Automated Quality Gate Results

            All quality checks have passed successfully:

            - üîç **TypeScript Compilation**: ‚úÖ Passed
            - üé® **ESLint Code Style**: ‚úÖ Passed  
            - üß™ **Test Suite**: ‚úÖ Passed (${testSummary})
            - üìù **Markdown Documentation**: ‚úÖ Passed

            ### ü§ñ Copilot Review Status
            - **Reviewer**: Copilot has been automatically requested
            - **Guidelines**: Following [project standards](.github/copilot-instructions.md)
            - **Focus Areas**: React Native, TypeScript, Drizzle ORM best practices

            ---
            *This PR meets all technical quality standards and is ready for human review.*`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: summaryComment
            });

            // Add comprehensive Copilot Review Guidance
            const reviewGuidance = `## ü§ñ @github-copilot - Review Guidance

            Please review this PR focusing on the following areas based on our project standards:

            ### üìã Review Checklist
            - [ ] **TypeScript**: Strict typing, no \`any\` types${hasTypeScriptChanges ? ' ‚ö†Ô∏è *TypeScript changes detected*' : ''}
            - [ ] **React Native**: Following mobile best practices${hasComponentChanges || hasAppChanges ? ' ‚ö†Ô∏è *Component/App changes detected*' : ''}
            - [ ] **Drizzle ORM**: Type-safe database operations${hasDbChanges ? ' ‚ö†Ô∏è *Database changes detected*' : ''}
            - [ ] **Testing**: New tests for new functionality${hasTestChanges ? ' ‚úÖ *Test changes detected*' : ' ‚ö†Ô∏è *No test changes - verify if needed*'}
            - [ ] **Performance**: No unnecessary re-renders
            - [ ] **Documentation**: Adequate code comments
            - [ ] **Architecture**: Follows project structure

            ### üîç Specific Focus Areas for This PR:
            ${hasTypeScriptChanges ? '- **TypeScript Changes**: Ensure strict typing, proper interfaces, no `any` types\n' : ''}${hasComponentChanges ? '- **Component Changes**: Check StyleSheet usage, responsive design with size-matters\n' : ''}${hasDbChanges ? '- **Database Changes**: Verify Drizzle schema types, migration safety, live queries\n' : ''}${hasAppChanges ? '- **App/Routing Changes**: Confirm expo-router conventions, proper navigation\n' : ''}${!hasTestChanges && (hasTypeScriptChanges || hasComponentChanges || hasDbChanges) ? '- **Missing Tests**: Consider if new functionality needs test coverage\n' : ''}
            ### üö® Common Issues to Flag:
            - Console.log statements in production code
            - Hardcoded strings (should use constants)
            - Missing error handling
            - Unused imports or variables
            - Non-descriptive variable names
            - Web-only CSS properties in React Native
            - Missing accessibility labels
            - Large bundle imports

            ### üì± Mobile Specific Checks:
            - Cross-platform compatibility (iOS/Android)
            - Responsive design using react-native-size-matters
            - Proper safe area handling
            - Keyboard avoidance considerations

            ---
            *Review based on [AnimeBOX Project Guidelines](.github/copilot-instructions.md)*`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: reviewGuidance
            });